{% extends 'base.html.twig' %}

{% block title %}Créer une Mission{% endblock %}

{% block body %}
<div class="container mt-5">
    <!-- Titre principal -->
    <div class="text-center mb-4">
        <h1 class="text-danger fw-bold">Créer une Nouvelle Mission</h1>
        <p class="text-secondary">Ajoutez une mission épique avec ses détails et attribuez les équipes appropriées.</p>
    </div>

    <!-- Contenu principal -->
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Formulaire -->
            <div class="card shadow-lg border-0">
                <div class="card-header bg-danger text-white text-center">
                    <h4 class="mb-0">Formulaire de création</h4>
                </div>
                <div class="card-body">   

                <!-- Début du formulaire -->
                    {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
                <!-- Champ pour le titre de la mission -->
                    <div class="mb-3">
                        {{ form_label(form.titre, 'Titre de la Mission', {'label_attr': {'class': 'form-label text-danger fw-bold'}}) }}
                        {{ form_widget(form.titre, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.titre) }}
                    </div>                    
                <!-- Champ pour la description de la mission -->
                    <div class="mb-3">
                        {{ form_label(form.description, 'Description', {'label_attr': {'class': 'form-label text-danger fw-bold'}}) }}
                        {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.description) }}
                    </div>
                <!-- Champ caché pour le statut -->
                     <div style="display: none;">
                        {{ form_row(form.statut) }}
                    </div>
                <!-- Champ pour le lieu de la mission -->
                        <div class="col-md-6 mb-3">
                            {{ form_label(form.lieu, 'Lieu', {'label_attr': {'class': 'form-label text-danger fw-bold'}}) }}
                            {{ form_widget(form.lieu, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.lieu) }}
                        </div>
                <!-- Champ pour la date de début -->
                    <div class="mb-3">
                        {{ form_label(form.dateDebut, 'Date de Début', {'label_attr': {'class': 'form-label text-danger fw-bold'}}) }}
                        {{ form_widget(form.dateDebut, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.dateDebut) }}
                    </div>
                <!-- Champ pour le niveau de danger -->
                    <div class="mb-3">
                        {{ form_label(form.niveauDanger, 'Niveau de Danger (1 à 5)', {'label_attr': {'class': 'form-label text-danger fw-bold'}}) }}
                        {{ form_widget(form.niveauDanger, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.niveauDanger) }}
                    </div>
                    <!-- Champ caché pour l'équipe assignée -->
                    {{ form_widget(form.equipeAssignee, {'attr': {'type': 'hidden', 'required': true}}) }}
                <!-- Conteneur pour afficher le message d'erreur -->
                    <div id="equipe-error-container"  style="display: none;">
                        Veuillez sélectionner une équipe pour cette mission.
                    </div>
                <!-- Liste des pouvoirs requis -->
                    <div class="mb-3">
                        {{ form_label(form.pouvoirsRequis, 'Pouvoirs Requis', {'label_attr': {'class': 'form-label text-danger fw-bold'}}) }}
                        <div class="form-check d-flex flex-wrap gap-3">
                            {% for child in form.pouvoirsRequis %}
                                <div class="form-check form-check-inline">
                                    {{ form_widget(child, {'attr': {'class': 'form-check-input'}}) }}
                                    {{ form_label(child, null, {'label_attr': {'class': 'form-check-label'}}) }}
                                </div>
                            {% endfor %}
                        </div>
                        {{ form_errors(form.pouvoirsRequis) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Liste des Équipes Compatibles -->
    <h2 class="text-warning fw-bold mt-5 text-center text-shadow">Équipes Compatibles</h2>
    <div id="equipes-suggerees" class="row g-4"></div>

    <!-- Autres Équipes -->
    <h2 class="text-secondary fw-bold mt-5 text-center">Autres Équipes</h2>
    <div id="autres-equipes" class="row g-4"></div>

    <!-- Boutons pour soumettre ou retourner à la liste-->
    <div class="text-center mt-4">
        <button id="submit-button" type="submit" class="btn btn-danger w-50">
            <i class="fas fa-save"></i> Créer
        </button>
        <a href="{{ path('app_mission_index') }}" class="btn btn-outline-danger w-50 mt-3">
            <i class="fas fa-arrow-left"></i> Retour à la liste
        </a>
    </div>

    {{ form_end(form) }}
</div>

<!-- Script pour gérer les équipes et les pouvoirs -->
<script>
document.addEventListener('DOMContentLoaded', () => {
    const pouvoirsCheckboxes = document.querySelectorAll('[name="mission[pouvoirsRequis][]"]');
    const equipeAssigneeInput = document.querySelector('[name="mission[equipeAssignee]"]');
    const equipeErrorContainer = document.getElementById('equipe-error-container');
    const submitButton = document.getElementById('submit-button');

// Mise à jour des équipes affichées en fonction des pouvoirs sélectionnés
    function updateEquipeDisplay(data) {
        const equipesSuggereesContainer = document.querySelector('#equipes-suggerees');
        const autresEquipesContainer = document.querySelector('#autres-equipes');

        equipesSuggereesContainer.innerHTML = '';
        autresEquipesContainer.innerHTML = '';

        data.suggested.forEach(equipe => equipesSuggereesContainer.appendChild(createEquipeCard(equipe, 'suggested')));
        data.others.forEach(equipe => autresEquipesContainer.appendChild(createEquipeCard(equipe, 'other')));

        addEquipeSelectionHandler(); // Réattacher les écouteurs
    }
// Création des cartes pour afficher les équipes
    function createEquipeCard(equipe, type) {
        const div = document.createElement('div');
        div.className = 'col-md-4';
        div.innerHTML = `
            <div class="card shadow border-0">
                <div class="card-header ${type === 'suggested' ? 'bg-warning text-dark' : 'bg-secondary text-white'} text-center fw-bold">
                    ${equipe.nom}
                </div>
                <div class="card-body">
                    <p><strong>Chef :</strong> ${equipe.chef || 'Non spécifié'}</p>
                    <p><strong>Membres :</strong> ${equipe.membres.join(', ') || 'Aucun membre'}</p>
                    <div class="form-check mt-3">
                        <input class="form-check-input equipe-checkbox" type="radio" name="equipe-selection" value="${equipe.id}" id="equipe-${equipe.id}">
                        <label class="form-check-label" for="equipe-${equipe.id}">
                            Sélectionner cette équipe
                        </label>
                    </div>
                </div>
            </div>
        `;
        return div;
    }
    // Gérer la sélection d'une équipe
    function addEquipeSelectionHandler() {
        const equipeCheckboxes = document.querySelectorAll('.equipe-checkbox');
        equipeCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', (event) => {
                if (event.target.checked) {
                    equipeAssigneeInput.value = event.target.value;
                    equipeErrorContainer.style.display = 'none';
                }
            });
        });
    }
    // Validation avant soumission
    submitButton.addEventListener('click', (event) => {
        if (!equipeAssigneeInput.value) {
            event.preventDefault();
            equipeErrorContainer.style.display = 'block';
        }
    });
    // Mise à jour dynamique des équipes en fonction des pouvoirs
    pouvoirsCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            const pouvoirs = Array.from(pouvoirsCheckboxes)
                .filter(cb => cb.checked)
                .map(cb => cb.value);

            fetch('/mission/api/equipes-suggerees', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ pouvoirs }),
            })
                .then(response => response.json())
                .then(data => updateEquipeDisplay(data))
                .catch(error => console.error('Erreur :', error));
        });
    });

    addEquipeSelectionHandler();
});
</script>
{% endblock %}
